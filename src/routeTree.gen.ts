/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router';

// Import Routes

import { Route as rootRoute } from './app/router/routes/__root';
import { Route as HomeImport } from './app/router/routes/home';
import { Route as SpaceSpaceIdImport } from './app/router/routes/space.$spaceId';
import { Route as SpaceSpaceIdProjectWorkspaceProjectIdImport } from './app/router/routes/space.$spaceId_.project-workspace.$projectId';

// Create Virtual Routes

const NotificationLazyImport = createFileRoute('/notification')();
const AboutLazyImport = createFileRoute('/about')();

// Create/Update Routes

const NotificationLazyRoute = NotificationLazyImport.update({
  id: '/notification',
  path: '/notification',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./app/router/routes/notification.lazy').then((d) => d.Route)
);

const AboutLazyRoute = AboutLazyImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./app/router/routes/about.lazy').then((d) => d.Route));

const HomeRoute = HomeImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRoute,
} as any);

const SpaceSpaceIdRoute = SpaceSpaceIdImport.update({
  id: '/space/$spaceId',
  path: '/space/$spaceId',
  getParentRoute: () => rootRoute,
} as any);

const SpaceSpaceIdProjectWorkspaceProjectIdRoute =
  SpaceSpaceIdProjectWorkspaceProjectIdImport.update({
    id: '/space/$spaceId_/project-workspace/$projectId',
    path: '/space/$spaceId/project-workspace/$projectId',
    getParentRoute: () => rootRoute,
  } as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/home': {
      id: '/home';
      path: '/home';
      fullPath: '/home';
      preLoaderRoute: typeof HomeImport;
      parentRoute: typeof rootRoute;
    };
    '/about': {
      id: '/about';
      path: '/about';
      fullPath: '/about';
      preLoaderRoute: typeof AboutLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/notification': {
      id: '/notification';
      path: '/notification';
      fullPath: '/notification';
      preLoaderRoute: typeof NotificationLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/space/$spaceId': {
      id: '/space/$spaceId';
      path: '/space/$spaceId';
      fullPath: '/space/$spaceId';
      preLoaderRoute: typeof SpaceSpaceIdImport;
      parentRoute: typeof rootRoute;
    };
    '/space/$spaceId_/project-workspace/$projectId': {
      id: '/space/$spaceId_/project-workspace/$projectId';
      path: '/space/$spaceId/project-workspace/$projectId';
      fullPath: '/space/$spaceId/project-workspace/$projectId';
      preLoaderRoute: typeof SpaceSpaceIdProjectWorkspaceProjectIdImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/home': typeof HomeRoute;
  '/about': typeof AboutLazyRoute;
  '/notification': typeof NotificationLazyRoute;
  '/space/$spaceId': typeof SpaceSpaceIdRoute;
  '/space/$spaceId/project-workspace/$projectId': typeof SpaceSpaceIdProjectWorkspaceProjectIdRoute;
}

export interface FileRoutesByTo {
  '/home': typeof HomeRoute;
  '/about': typeof AboutLazyRoute;
  '/notification': typeof NotificationLazyRoute;
  '/space/$spaceId': typeof SpaceSpaceIdRoute;
  '/space/$spaceId/project-workspace/$projectId': typeof SpaceSpaceIdProjectWorkspaceProjectIdRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/home': typeof HomeRoute;
  '/about': typeof AboutLazyRoute;
  '/notification': typeof NotificationLazyRoute;
  '/space/$spaceId': typeof SpaceSpaceIdRoute;
  '/space/$spaceId_/project-workspace/$projectId': typeof SpaceSpaceIdProjectWorkspaceProjectIdRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | '/home'
    | '/about'
    | '/notification'
    | '/space/$spaceId'
    | '/space/$spaceId/project-workspace/$projectId';
  fileRoutesByTo: FileRoutesByTo;
  to:
    | '/home'
    | '/about'
    | '/notification'
    | '/space/$spaceId'
    | '/space/$spaceId/project-workspace/$projectId';
  id:
    | '__root__'
    | '/home'
    | '/about'
    | '/notification'
    | '/space/$spaceId'
    | '/space/$spaceId_/project-workspace/$projectId';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  HomeRoute: typeof HomeRoute;
  AboutLazyRoute: typeof AboutLazyRoute;
  NotificationLazyRoute: typeof NotificationLazyRoute;
  SpaceSpaceIdRoute: typeof SpaceSpaceIdRoute;
  SpaceSpaceIdProjectWorkspaceProjectIdRoute: typeof SpaceSpaceIdProjectWorkspaceProjectIdRoute;
}

const rootRouteChildren: RootRouteChildren = {
  HomeRoute: HomeRoute,
  AboutLazyRoute: AboutLazyRoute,
  NotificationLazyRoute: NotificationLazyRoute,
  SpaceSpaceIdRoute: SpaceSpaceIdRoute,
  SpaceSpaceIdProjectWorkspaceProjectIdRoute: SpaceSpaceIdProjectWorkspaceProjectIdRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/home",
        "/about",
        "/notification",
        "/space/$spaceId",
        "/space/$spaceId_/project-workspace/$projectId"
      ]
    },
    "/home": {
      "filePath": "home.tsx"
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/notification": {
      "filePath": "notification.lazy.tsx"
    },
    "/space/$spaceId": {
      "filePath": "space.$spaceId.tsx"
    },
    "/space/$spaceId_/project-workspace/$projectId": {
      "filePath": "space.$spaceId_.project-workspace.$projectId.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
